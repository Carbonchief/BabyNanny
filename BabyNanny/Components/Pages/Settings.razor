@page "/settings"
@using BabyNanny.Models
@using BabyNanny.Data
@inject BabyNannyRepository Repository
@inject ChildState ChildState
@inject IDialogService DialogService

<h3 class="mb-3">Children</h3>
<TelerikListView Data="@ChildState.Children" Class="mb-3">
    <Template>
        <div class="d-flex justify-content-between align-items-center border rounded p-2 mb-1">
            <span>@context.Name (@context.Birthday?.ToString("d"))</span>
            <span>
                <TelerikButton OnClick="() => EditChild(context)" Size="@(ThemeConstants.Button.Size.Small)" Class="me-2">Edit</TelerikButton>
                <TelerikButton OnClick="() => DeleteChildAsync(context)" Size="@(ThemeConstants.Button.Size.Small)" ThemeColor="ThemeColor.Error">Delete</TelerikButton>
            </span>
        </div>
    </Template>
</TelerikListView>

@if (IsEditing)
{
    <h4 class="mb-2">@(EditingChild.Id == 0 ? "Add Child" : "Edit Child")</h4>
    <EditForm Model="EditingChild" OnValidSubmit="SaveChildAsync">
        <DataAnnotationsValidator />
        <div class="mb-2">
            <label>Name</label>
            <InputText @bind-Value="EditingChild.Name" class="form-control" />
            <ValidationMessage For="() => EditingChild.Name" />
        </div>
        <div class="mb-2">
            <label>Birthday</label>
            <InputDate @bind-Value="EditingChild.Birthday" class="form-control" />
        </div>
        <TelerikButton Type="submit" Class="me-2">Save</TelerikButton>
        <TelerikButton OnClick="CancelEdit" ThemeColor="ThemeColor.Light">Cancel</TelerikButton>
    </EditForm>
}
else
{
    <TelerikButton OnClick="NewChild">Add Child</TelerikButton>
}

@code {
    private Child EditingChild { get; set; } = new();
    private bool IsEditing { get; set; }

    protected override void OnInitialized()
    {
        if (ChildState.Children.Count == 0)
        {
            var local = Repository.GetChildren();
            if (local != null)
                ChildState.Children = local;
        }
    }

    private void NewChild()
    {
        EditingChild = new Child();
        IsEditing = true;
    }

    private void EditChild(Child child)
    {
        EditingChild = new Child { Id = child.Id, Name = child.Name, Birthday = child.Birthday };
        IsEditing = true;
    }

    private Task SaveChildAsync()
    {
        if (EditingChild.Id == 0)
        {
            var created = Repository.AddChild(EditingChild);
            ChildState.AddOrUpdateChild(created);
        }
        else
        {
            Repository.UpdateChild(EditingChild);
            ChildState.AddOrUpdateChild(EditingChild);
        }

        EditingChild = new Child();
        IsEditing = false;
        return Task.CompletedTask;
    }

    private void CancelEdit()
    {
        EditingChild = new Child();
        IsEditing = false;
    }

    private async Task DeleteChildAsync(Child child)
    {
        var confirm = await DialogService.DisplayAlert("Delete Child", $"Delete {child.Name}?", "Delete", "Cancel");
        if (!confirm)
            return;

        Repository.DeleteChild(child.Id);
        ChildState.RemoveChild(child.Id);
    }
}
