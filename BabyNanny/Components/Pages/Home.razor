@page "/"
@using BabyNanny.Models
@using System.Timers;
@using BabyNanny.Helpers;
@using System.Linq;
@using BabyNanny.Data;
@inject IConnectivity ConnectivityService;
@inject NavigationManager NavigationManager;
@inject IDialogService DialogService;
@inject ChildState ChildState;


<div>
    <div class="item">
        <div class="icon">
            <img class="img-thumbnail" src="images/baby-sleeping.svg" alt="Baby Sleeping" width="40">
        </div>
        <div class="text">
            <h5>
                @TxtSleep
            </h5>
            <h6>
                @TxtSleepProgress
            </h6>

        </div>
        <TelerikButton Class="homeButton" Size="@(ThemeConstants.Button.Size.Small)" ThemeColor="@(ThemeConstants.Button.ThemeColor.Primary)" OnClick="@(async () => await ActionClick(BabyNannyRepository.ActionTypes.Sleeping))">
            @BtnSleepText
        </TelerikButton>
    </div>
    <hr>
    <div class="item">
        <div class="icon">
            <img class="img-thumbnail" src="images/baby-diaper.svg" alt="Baby Diaper" width="40">
        </div>
        <div class="text">
            <h5>
                @TxtDiaper
            </h5>
            <h6>
                @TxtDiaperProgress
            </h6>

        </div>
        <TelerikButton Id="btnDiaper" Class="homeButton" Size="@(ThemeConstants.Button.Size.Small)" ThemeColor="@(ThemeConstants.Button.ThemeColor.Primary)" OnClick="@(async () => await ActionClick(BabyNannyRepository.ActionTypes.Diaper))">
            @BtnDiaperText
        </TelerikButton>
    </div>
    <hr>
    <div class="item">
        <div class="icon">
            <img class="img-thumbnail" src="images/baby-bottle.png" alt="Baby Bottle" width="40" />
        </div>
        <div class="text">
            <h5>
                @TxtFeed
            </h5>
            <h6>
                @TxtFeedProgress
            </h6>
        </div>
        <TelerikButton 
            Class="homeButton" 
            Size="@(ThemeConstants.Button.Size.Small)" 
            ThemeColor="@(ThemeConstants.Button.ThemeColor.Primary)"              
            OnClick="@(async () => await ActionClick(BabyNannyRepository.ActionTypes.Feeding))">
            @BtnFeedText
        </TelerikButton>
    </div>
    <div>
        <br />
        <TelerikListView Data="@LstActivityActions">
            <HeaderTemplate>
                <div class="text-center">
                    <h4>Activity</h4>
                </div>
            </HeaderTemplate>
            <Template>
                <div class="k-card k-card-horizontal">
                    <div class="k-vbox k-flex-grow">
                        <div class="k-card-body ">
                            @switch (context.Type)
                            {
                                case 0:
                                    <img class="" src="images/baby-bottle.png" alt="Baby Bottle" width="20" />
                                    break;
                                case 1:
                                    <img src="images/baby-sleeping.svg" alt="Baby Sleeping" width="20">
                                    break;
                                case 2:
                                    <img src="images/baby-diaper.svg" alt="Baby Diaper" width="20">
                                    break;
                            }
                            &nbsp; <h6 class=" d-inline">@TimeUtils.TimeDifference(context.Started, DateTime.Now) ago</h6> <h6 class="k-card-subtitle d-inline"></h6>
                        </div>
                        <div class="k-card-actions k-actions-horizontal k-actions-start">
                        </div>
                    </div>

                </div>
            </Template>
        </TelerikListView>
    </div>

</div>

@code
{
    private string TxtSleep { get; set; } = "Sleep";
    private string TxtSleepProgress { get; set; } = "";
    private string TxtDiaper { get; set; } = "Diaper Change";
    private string TxtDiaperProgress { get; set; } = "";
    private string TxtFeed { get; set; } = "Feed";
    private string TxtFeedProgress { get; set; } = "";
    private string BtnSleepText { get; set; } = "Start";
    private string BtnFeedText { get; set; } = "Start";
    private string BtnDiaperText { get; set; } = "Log";
    private List<Child>? LstChildren { get; set; }
    private List<BabyAction>? LstActions { get; set; }
    private List<BabyAction>? LstActivityActions { get; set; }
    private Timer? _timer;
    private DateTime? _startTime;
    private DateTime? _currentTime;
    private BabyAction? _lastAction;



    async Task ActionClick(BabyNannyRepository.ActionTypes actionType)
    {
        if (actionType == BabyNannyRepository.ActionTypes.Feeding)
        {
            await HandleFeedingAction();
            return;
        }
        if (actionType == BabyNannyRepository.ActionTypes.Diaper)
        {
            await HandleDiaperAction();
            return;
        }
        if (actionType == BabyNannyRepository.ActionTypes.Sleeping)
        {
            await HandleSleepAction();
            return;
        }
    }

    private async Task HandleFeedingAction()
    {
        var lastAction = GetLastAction(BabyNannyRepository.ActionTypes.Feeding);
        var isStopping = lastAction is { Stopped: null };

        if (isStopping)
        {
            lastAction = StopAction(lastAction!);
            TxtFeed = "Feeding";
            TxtFeedProgress = "a few seconds ago";
            BtnFeedText = "Start";
            RefreshActivityActions();
            StopTimer();
            InvokeAsync(StateHasChanged);
            return;
        }

        var option = await DialogService.DisplayActionSheet("Feeding", "Cancel", null, "Bottle", "Meal", "Left Breast", "Right Breast");
        if (string.IsNullOrEmpty(option) || option == "Cancel")
            return;

        var feedType = option switch
        {
            "Bottle" => BabyAction.FeedingTypes.Bottle,
            "Meal" => BabyAction.FeedingTypes.Meal,
            "Left Breast" => BabyAction.FeedingTypes.LeftBreast,
            _ => BabyAction.FeedingTypes.RightBreast
        };

        if (LstChildren == null) return;
        var action = new BabyAction
        {
            Type = (int)BabyNannyRepository.ActionTypes.Feeding,
            Started = DateTime.Now,
            ChildId = LstChildren[0].Id,
            FeedingType = feedType
        };
        var added = App.BabyNannyRepository?.AddAction(action) ?? false;
        if (!added)
        {
            await DialogService.DisplayAlert("Action Active",
                "Another action is already running for this child.", "OK");
            return;
        }

        LstActions?.Add(action);
        LstActions = LstActions?.OrderByDescending(x => x.Started).ToList();
        _lastAction = action;

        TxtFeed = "Feeding";
        TxtFeedProgress = "In Progress";
        BtnFeedText = "Stop";

        StartTimer(action);

        if (feedType == BabyAction.FeedingTypes.Bottle)
        {
            var amount = await DialogService.DisplayPrompt("Amount", "Amount (ml)");
            if (int.TryParse(amount, out var ml))
                action.AmountML = ml;
            var bottle = await DialogService.DisplayActionSheet("Bottle Type", "Cancel", null, "Breast Milk", "Formula");
            if (!string.IsNullOrEmpty(bottle) && bottle != "Cancel")
                action.BottleType = bottle;
        }
        else if (feedType == BabyAction.FeedingTypes.Meal)
        {
            var desc = await DialogService.DisplayPrompt("Meal", "Description");
            if (!string.IsNullOrWhiteSpace(desc))
                action.MealDescription = desc;
        }

        App.BabyNannyRepository?.EditAction(action);
    }

    private async Task HandleDiaperAction()
    {
        var option = await DialogService.DisplayActionSheet("Diaper", "Cancel", null, "Pee", "Poo", "Both");
        if (string.IsNullOrEmpty(option) || option == "Cancel")
            return;

        var action = await AddAction(BabyNannyRepository.ActionTypes.Diaper);
        if (action == null)
            return;

        action.DiaperType = option;
        StopAction(action);

        TxtDiaperProgress = "a few seconds ago";
        RefreshActivityActions();
        InvokeAsync(StateHasChanged);
    }

    private async Task HandleSleepAction()
    {
        var lastAction = GetLastAction(BabyNannyRepository.ActionTypes.Sleeping);
        var isStopping = lastAction is { Stopped: null };

        if (isStopping)
        {
            lastAction = StopAction(lastAction!);
            TxtSleep = "Sleep";
            TxtSleepProgress = "a few seconds ago";
            BtnSleepText = "Start";
            RefreshActivityActions();
            StopTimer();
            InvokeAsync(StateHasChanged);
            return;
        }

        var action = await AddAction(BabyNannyRepository.ActionTypes.Sleeping);
        if (action == null)
            return;

        TxtSleep = "Sleep";
        TxtSleepProgress = "In Progress";
        BtnSleepText = "Stop";

        StartTimer(action);
    }

    private BabyAction? GetLastAction(BabyNannyRepository.ActionTypes type)
    {
        LstActions ??= App.BabyNannyRepository?.GetActions();
        var babyAction = LstActions?.OrderByDescending(s => s.Started).FirstOrDefault(s => s.Type == (int)type);
        return babyAction;
    }

    private static BabyAction StopAction(BabyAction action)
    {
        action.Stopped = DateTime.Now;
        App.BabyNannyRepository?.EditAction(action);
        return action;
    }

    private async Task<BabyAction?> AddAction(BabyNannyRepository.ActionTypes type)
    {
        if (LstChildren == null) return null;
        var action = new BabyAction { Type = (int)type, Started = DateTime.Now, ChildId = LstChildren[0].Id };
        var added = App.BabyNannyRepository?.AddAction(action) ?? false;
        if (!added)
        {
            await DialogService.DisplayAlert("Action Active",
                "Another action is already running for this child.", "OK");
            return null;
        }
        LstActions?.Add(action);
        LstActions = LstActions?.OrderByDescending(x => x.Started).ToList();
        _lastAction = action;
        return action;
    }



    private void RefreshActivityActions()
    {
        if (LstActions == null)
            return;

        LstActivityActions = LstActions
            .Where(a => a.Stopped != null)
            .GroupBy(a => a.Type)
            .Select(g => g.OrderByDescending(x => x.Started).First())
            .OrderByDescending(x => x.Started)
            .ToList();
    }

    private void UpdateTime(object? source, ElapsedEventArgs e)
    {
        if (_lastAction == null || _startTime == null)
            return;
        var currentTime = DateTime.Now;
        var timeSpan = currentTime - _startTime;
        switch (_lastAction.Type)
        {
            case 0:
                TxtFeed = timeSpan.GetValueOrDefault().ToString(@"hh\:mm\:ss");
                BtnFeedText = "Stop";
                break;
            case 1:
                TxtSleep = timeSpan.GetValueOrDefault().ToString(@"hh\:mm\:ss");
                // btnSleepText = "Stop";
                break;
            case 2:
                TxtDiaper = timeSpan.GetValueOrDefault().ToString(@"hh\:mm\:ss");
                BtnDiaperText = "Stop";
                break;
        }

        // Trigger re-rendering of the component
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        _timer?.Stop();
        _timer?.Dispose();
    }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        var lstChildren = App.BabyNannyRepository?.GetChildren();
        var lstActions = App.BabyNannyRepository?.GetActions();
        _currentTime = DateTime.Now;

        if (lstActions is { Count: > 0 })
            _lastAction = lstActions[0];

        LstActivityActions = new List<BabyAction>();
        if (lstChildren != null && lstChildren.Any())
        {
            LstChildren = lstChildren;
            ChildState.SelectedChild = LstChildren.First();
        }
        else
        {
            LstChildren = new List<Child>();
            // var childName = DialogService.DisplayPrompt("Add Child", "Please enter the child's name").Result;
            var childName = "Child 1";
            if (!string.IsNullOrEmpty(childName))
            {
                var child = App.BabyNannyRepository?.AddChild(new Child { Name = childName });
                if (child != null)
                {
                    LstChildren.Add(child);
                    ChildState.SelectedChild = child;
                }
            }
        }

        if (lstActions != null && lstActions.Any())
        {
            LstActions = lstActions;

            var sleepAction = GetLastAction(BabyNannyRepository.ActionTypes.Sleeping);
            if (sleepAction?.Stopped == null)
            {

                TxtSleepProgress = "In Progress";
                TxtSleep = (DateTime.Now - sleepAction?.Started).GetValueOrDefault().ToString(@"hh\:mm\:ss");
                BtnSleepText = "Stop";
            }
            else
            {
                TxtSleepProgress = TimeUtils.TimeDifference(sleepAction.Started, DateTime.Now) + " ago";
            }

            var feedAction = GetLastAction(BabyNannyRepository.ActionTypes.Feeding);
            if (feedAction?.Stopped == null)
            {

                TxtFeedProgress = "In Progress";
                TxtFeed = (DateTime.Now - feedAction?.Started).GetValueOrDefault().ToString(@"hh\:mm\:ss");
                BtnFeedText = "Stop";
            }
            else
            {
                TxtFeedProgress = TimeUtils.TimeDifference(feedAction.Started, DateTime.Now) + " ago";
            }

            var diaperAction = GetLastAction(BabyNannyRepository.ActionTypes.Diaper);
            if (diaperAction?.Stopped != null)
            {
                TxtDiaperProgress = TimeUtils.TimeDifference(diaperAction.Started, DateTime.Now) + " ago";
            }

            RefreshActivityActions();

            // Resume timer for any ongoing action after app restart
            var runningActions = new[] { sleepAction, feedAction }
                .Where(a => a?.Stopped == null)
                .OrderByDescending(a => a?.Started)
                .ToList();

            if (runningActions.Any())
            {
                var resumeAction = runningActions.First();
                _lastAction = resumeAction!;
                StartTimer(resumeAction);
            }
        }
        else
        {
            LstActions = new List<BabyAction>();
        }
    }

    private void StartTimer(BabyAction? action)
    {
        _startTime = action?.Started;
        _timer = new Timer(1000); // 1 second interval
        _timer.Elapsed += UpdateTime;
        _timer.Start();
    }

    private void StopTimer()
    {
        _timer?.Stop();
    }

    private string TimeDifference(DateTime? contextStarted)
    {
        return TimeUtils.TimeDifference(contextStarted, _currentTime);
    }
}