@page "/stats"
@inject IJSRuntime JSRuntime

<div class="container my-3">
<h3>Stats</h3>
<div class="k-form d-flex gap-2 mb-3">
    <select @bind="SelectedActionType" class="form-select">
        @foreach (var at in Enum.GetValues<BabyNannyRepository.ActionTypes>())
        {
            <option value="@((int)at)">@at</option>
        }
    </select>
    <select @bind="SelectedRange" class="form-select">
        @foreach (var d in TimeRanges)
        {
            <option value="@d">@d days</option>
        }
    </select>

</div>
<p>Average per day: @AveragePerDay.ToString("0.##")</p>
@if (SubtypeChartData?.Count > 0)
{
    <canvas id="statsChart" width="400" height="300"></canvas>
}
else
{
    <p>No data available.</p>
}
</div>

@code {
    private BabyNannyRepository.ActionTypes _selectedActionType = BabyNannyRepository.ActionTypes.Feeding;
    private BabyNannyRepository.ActionTypes SelectedActionType
    {
        get => _selectedActionType;
        set
        {
            _selectedActionType = value;
            UpdateStats();
        }
    }

    private int _selectedRange = 7;
    private int SelectedRange
    {
        get => _selectedRange;
        set
        {
            _selectedRange = value;
            UpdateStats();
        }
    }
    private double AveragePerDay { get; set; }
    private List<int> TimeRanges { get; } = new() { 7, 14, 30 };
    private List<ChartItem> SubtypeChartData { get; set; } = new();
    private bool _shouldRenderChart;

    protected override void OnInitialized()
    {
        UpdateStats();
    }

    private void UpdateStats()
    {
        var actions = App.BabyNannyRepository?.GetActions();
        if (actions == null)
            return;
        var from = DateTime.Today.AddDays(-SelectedRange + 1);
        var filtered = actions
            .Where(a => a.Started.HasValue && a.Started.Value >= from && a.Type == (int)SelectedActionType)
            .ToList();
        AveragePerDay = filtered.Count / (double)SelectedRange;

        if (SelectedActionType == BabyNannyRepository.ActionTypes.Feeding)
        {
            SubtypeChartData = filtered
                .GroupBy(a => a.FeedingType?.ToString() ?? "Unknown")
                .Select(g => new ChartItem { Category = g.Key, Value = g.Count() / (double)SelectedRange })
                .ToList();
        }
        else if (SelectedActionType == BabyNannyRepository.ActionTypes.Diaper)
        {
            SubtypeChartData = filtered
                .GroupBy(a => a.DiaperType ?? "Unknown")
                .Select(g => new ChartItem { Category = g.Key, Value = g.Count() / (double)SelectedRange })
                .ToList();
        }
        else
        {
            SubtypeChartData = new();
        }

        _shouldRenderChart = true;
        InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_shouldRenderChart)
        {
            _shouldRenderChart = false;
            await RenderChart();
        }
    }

    private Task RenderChart()
    {
        var labels = SubtypeChartData.Select(c => c.Category).ToList();
        var values = SubtypeChartData.Select(c => c.Value).ToList();
        return JSRuntime.InvokeVoidAsync("renderStatsChart", labels, values).AsTask();
    }

    public class ChartItem
    {
        public string Category { get; set; } = string.Empty;
        public double Value { get; set; }
    }
}
