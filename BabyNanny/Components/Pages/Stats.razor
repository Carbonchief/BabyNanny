@page "/stats"
@inject IJSRuntime JSRuntime

<div class="container my-3">
<h3>Stats</h3>
<div class="k-form d-flex gap-2 mb-3">
    <select @bind="SelectedActionType" class="form-select">
        @foreach (var at in Enum.GetValues<BabyNannyRepository.ActionTypes>())
        {
            <option value="@((int)at)">@at</option>
        }
    </select>
    <select @bind="SelectedRange" class="form-select">
        @foreach (var d in TimeRanges)
        {
            <option value="@d">@d days</option>
        }
    </select>

</div>
<p>Average per day: @AveragePerDay.ToString("0.##")</p>
@if (SubtypeChartData?.Count > 0)
{
    <canvas id="statsChart" width="400" height="300"></canvas>
}
@if (TrendChartData?.Count > 0)
{
    <canvas id="trendChart" width="400" height="300"></canvas>
}
@if (SubtypeChartData.Count == 0 && TrendChartData.Count == 0)
{
    <p>No data available.</p>
}
</div>

@code {
    private BabyNannyRepository.ActionTypes _selectedActionType = BabyNannyRepository.ActionTypes.Feeding;
    private BabyNannyRepository.ActionTypes SelectedActionType
    {
        get => _selectedActionType;
        set
        {
            _selectedActionType = value;
            UpdateStats();
        }
    }

    private int _selectedRange = 7;
    private int SelectedRange
    {
        get => _selectedRange;
        set
        {
            _selectedRange = value;
            UpdateStats();
        }
    }
    private double AveragePerDay { get; set; }
    private List<int> TimeRanges { get; } = new() { 7, 14, 30 };
    private List<ChartItem> SubtypeChartData { get; set; } = new();
    private List<ChartItem> TrendChartData { get; set; } = new();
    private bool _shouldRenderCharts;

    protected override void OnInitialized()
    {
        UpdateStats();
    }

    private void UpdateStats()
    {
        var actions = App.BabyNannyRepository?.GetActions();
        if (actions == null)
            return;
        var from = DateTime.Today.AddDays(-SelectedRange + 1);
        var filtered = actions
            .Where(a => a.Started.HasValue && a.Started.Value >= from && a.Type == (int)SelectedActionType)
            .ToList();

        TrendChartData = new();

        if (SelectedActionType == BabyNannyRepository.ActionTypes.Sleeping)
        {
            var completed = filtered.Where(a => a.Stopped.HasValue).ToList();
            AveragePerDay = completed.Sum(a => (a.Stopped!.Value - a.Started!.Value).TotalHours) / SelectedRange;
            SubtypeChartData = new()
            {
                new ChartItem { Category = "Sleep", Value = AveragePerDay }
            };

            var grouped = new Dictionary<DateTime, double>();
            foreach (var a in completed)
            {
                var day = a.Started!.Value.Date;
                if (!grouped.ContainsKey(day))
                    grouped[day] = 0;
                grouped[day] += (a.Stopped!.Value - a.Started.Value).TotalHours;
            }
            BuildTrendData(grouped, from);
            _shouldRenderCharts = true;
            InvokeAsync(StateHasChanged);
            return;
        }

        AveragePerDay = filtered.Count / (double)SelectedRange;

        if (SelectedActionType == BabyNannyRepository.ActionTypes.Feeding)
        {
            SubtypeChartData = filtered
                .GroupBy(a => a.FeedingType?.ToString() ?? "Unknown")
                .Select(g => new ChartItem { Category = g.Key, Value = g.Count() / (double)SelectedRange })
                .ToList();
        }
        else if (SelectedActionType == BabyNannyRepository.ActionTypes.Diaper)
        {
            SubtypeChartData = filtered
                .GroupBy(a => a.DiaperType ?? "Unknown")
                .Select(g => new ChartItem { Category = g.Key, Value = g.Count() / (double)SelectedRange })
                .ToList();
        }
        else
        {
            SubtypeChartData = new();
        }

        var dayCounts = new Dictionary<DateTime, double>();
        foreach (var a in filtered)
        {
            var day = a.Started!.Value.Date;
            if (!dayCounts.ContainsKey(day))
                dayCounts[day] = 0;
            dayCounts[day] += 1;
        }
        BuildTrendData(dayCounts, from);

        _shouldRenderCharts = true;
        InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_shouldRenderCharts)
        {
            _shouldRenderCharts = false;
            await RenderChart();
            await RenderTrendChart();
        }
    }

    private Task RenderChart()
    {
        var labels = SubtypeChartData.Select(c => c.Category).ToList();
        var values = SubtypeChartData.Select(c => c.Value).ToList();
        return JSRuntime.InvokeVoidAsync("renderStatsChart", labels, values).AsTask();
    }

    private Task RenderTrendChart()
    {
        var labels = TrendChartData.Select(c => c.Category).ToList();
        var values = TrendChartData.Select(c => c.Value).ToList();
        return JSRuntime.InvokeVoidAsync("renderTrendChart", labels, values).AsTask();
    }

    private void BuildTrendData(Dictionary<DateTime, double> grouped, DateTime from)
    {
        TrendChartData = new();
        var weeks = (int)Math.Ceiling(SelectedRange / 7.0);
        for (int i = 0; i < weeks; i++)
        {
            var start = from.AddDays(i * 7);
            var end = start.AddDays(Math.Min(7, SelectedRange - i * 7));
            var days = (end - start).Days;
            var sum = grouped.Where(kv => kv.Key >= start && kv.Key < end).Sum(kv => kv.Value);
            TrendChartData.Add(new ChartItem
            {
                Category = $"Wk {i + 1}",
                Value = days > 0 ? sum / days : 0
            });
        }
    }

    public class ChartItem
    {
        public string Category { get; set; } = string.Empty;
        public double Value { get; set; }
    }
}
