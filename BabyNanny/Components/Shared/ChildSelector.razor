@inject ChildStateService ChildState
@inject IDialogService DialogService

<input id="childMenuToggle" type="checkbox" title="Child menu" class="child-menu-toggle" />
<div class="child-menu" onclick="document.getElementById('childMenuToggle').checked = false;">
    <select class="form-select form-select-sm w-auto mb-2" @onchange="OnChange" value="@_selectedId">
        @foreach (var c in Children)
        {
            <option value="@c.Id">@c.Name</option>
        }
    </select>
    <TelerikButton Size="@(ThemeConstants.Button.Size.Small)" OnClick="AddChild">Add Child</TelerikButton>
</div>

@code {
    private List<Child> Children { get; set; } = new();
    private int _selectedId;

    protected override void OnInitialized()
    {
        Children = App.BabyNannyRepository?.GetChildren() ?? new();
        if (Children.Count > 0)
        {
            _selectedId = ChildState.SelectedChildId;
            if (_selectedId == 0)
            {
                _selectedId = Children[0].Id;
                ChildState.SetChild(_selectedId);
            }
        }
    }

    private void OnChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var id))
        {
            _selectedId = id;
            ChildState.SetChild(id);
        }
    }

    private async Task AddChild()
    {
        var name = await DialogService.DisplayPrompt("Child Name", "Enter child's name");
        if (string.IsNullOrWhiteSpace(name))
            return;
        var birthdayStr = await DialogService.DisplayPrompt("Birthday", "yyyy-MM-dd (optional)");
        DateTime? birthday = null;
        if (DateTime.TryParse(birthdayStr, out var bday))
            birthday = bday;
        var child = App.BabyNannyRepository?.AddChild(new Child { Name = name, Birthday = birthday });
        if (child != null)
        {
            Children.Add(child);
            _selectedId = child.Id;
            ChildState.SetChild(child.Id);
        }
    }
}
